filter f_synosys { program("^System$"); };
filter f_synoconn { program("^Connection$"); };

# f_synoxfer is used for syslog-notification.conf
filter f_synoxfer {
     program("^FtpFileTransfer$")   or
     program("^TFtpFileTransfer$")  or
     program("^FileStation$")       or
     program("^Webdav$")            or
     program("^WinFileService$")    or
     program("^MacFileService$");
};
filter f_sys_conn_xfer { filter(f_synosys) or filter(f_synoxfer); };

parser p_msg_to_user_event {
	csv-parser(columns("MSG.USER", "MSG.EVENT")
	delimiters(chars(""), strings(":\t"))
	flags(escape-none greedy)
	template("${MSG}"));
};
destination d_synosys {
	sql(
	        type(sqlite3)
	        database("/var/log/synolog/.SYNOSYSDB")
	        table("logs")
	        columns(
	                "id integer primary key",
	                "time int default NULL",
	                "level text default NULL",
	                "username text default NULL",
	                "msg text default NULL"
	        )
	        values(
	                "@@NULL@@",
	                "$UNIXTIME",
	                "$LEVEL",
	                "${MSG.USER}",
					"${MSG.EVENT}"
	        )
	        indexes(
	                "id",
	                "time",
	                "level",
	                "username",
	                "time",
	        )
	        null("@@NULL@@")
	        flags(explicit-commits)
	        flush-lines(10000)
	        flush_timeout(100)
	        log_fifo_size(50000)
	);
};
log { source(s_syno_syslog); filter(f_synosys); parser(p_msg_to_user_event); destination(d_synosys);  };

rewrite r_synoconn {
	set("${MSG.USER}" value("USERNAME"));
	set("${MSG.EVENT}" value("MESSAGE"));
};
log { source(s_syno_syslog); filter(f_synoconn); parser(p_msg_to_user_event); rewrite(r_synoconn); destination(d_local_auth); };

filter f_synobkp { program("^Backup$"); };
destination d_synobkp {
	file("/var/log/synolog/synobackup.log"
	template("$PRIORITY\t$YEAR/$MONTH/$DAY $HOUR:$MIN:$SEC\t$MESSAGE\n"));
};
log { source(s_syno_syslog); filter(f_synobkp); destination(d_synobkp); };

filter f_synocopy { program("^UsbCopy$"); };
destination d_synocopy {
	file("/var/log/synolog/synocopy.log"
	template("$PRIORITY\t$YEAR/$MONTH/$DAY $HOUR:$MIN:$SEC\t$MESSAGE\n"));
};
log { source(s_syno_syslog); filter(f_synocopy); destination(d_synocopy); };

filter f_synonetbkp { program("^NetworkBackup$"); };
destination d_synonetbkp {
	sql(
	        type(sqlite3)
	        database("/var/log/synolog/.SYNONETBKPDB")
	        table("logs")
	        columns(
	                "id integer primary key",
	                "time int default NULL",
	                "level text default NULL",
	                "username text default NULL",
	                "msg text default NULL"
	        )
	        values(
	                "@@NULL@@",
	                "$UNIXTIME",
	                "$LEVEL",
	                "${MSG.USER}",
					"${MSG.EVENT}"
	        )
	        indexes(
	                "id",
	                "time",
	                "level",
	                "username",
	                "time",
	        )
	        null("@@NULL@@")
	        flags(explicit-commits)
	        flush-lines(10000)
	        flush_timeout(100)
	        log_fifo_size(50000)
	);
};
log { source(s_syno_syslog); filter(f_synonetbkp); parser(p_msg_to_user_event); destination(d_synonetbkp); };

filter f_synobkpserver { program("^BackupServer$"); };
destination d_synobkpserver {
	file("/var/log/synolog/synobackup_server.log"
	template("$PRIORITY\t$YEAR/$MONTH/$DAY $HOUR:$MIN:$SEC\t$MESSAGE\n"));
};
log { source(s_syno_syslog); filter(f_synobkpserver); destination(d_synobkpserver); };

filter f_synodr { program("^DisasterRecovery$"); };
destination d_synodr {
	file("/var/log/synolog/synodr.log"
	suppress(0)
	template("$PRIORITY\t$YEAR/$MONTH/$DAY $HOUR:$MIN:$SEC\t$MESSAGE\n"));
};
log { source(s_syno_syslog); filter(f_synodr); destination(d_synodr); };

filter f_synoaha { program("^AHA$"); };
destination d_synoaha {
	file("/var/log/synolog/synoaha.log"
	template("$PRIORITY\t$YEAR/$MONTH/$DAY $HOUR:$MIN:$SEC\t$MESSAGE\n"));
};
log { source(s_syno_syslog); filter(f_synoaha); destination(d_synoaha); };
filter f_synodocker { program("^Docker$"); };
destination d_synodocker {
	file("/var/log/synolog/synodockerwebapi.log"
	template("$PRIORITY\t$YEAR/$MONTH/$DAY $HOUR:$MIN:$SEC\t$MESSAGE\n"));
};
log { source(s_syno_syslog); filter(f_synodocker); destination(d_synodocker); };

filter f_synoha0 { program("^HA0$"); };
destination d_synoha0 {
	file("/var/lib/ha/sync/synoha_left.log"
	template("$PRIORITY\t$YEAR/$MONTH/$DAY $HOUR:$MIN:$SEC\t$MESSAGE\n"));
};
log { source(s_syno_syslog); filter(f_synoha0); destination(d_synoha0); };
filter f_synoha1 { program("^HA1$"); };
destination d_synoha1 {
	file("/var/lib/ha/sync/synoha_right.log"
	template("$PRIORITY\t$YEAR/$MONTH/$DAY $HOUR:$MIN:$SEC\t$MESSAGE\n"));
};
log { source(s_syno_syslog); filter(f_synoha1); destination(d_synoha1); };

filter f_synopetaspace { program("^PetaSpace$"); };
destination d_synopetaspace {
	file("/var/log/synolog/synopetaspace.log"
	template("$PRIORITY\t$YEAR/$MONTH/$DAY $HOUR:$MIN:$SEC\t$MESSAGE\n"));
};
log { source(s_syno_syslog); filter(f_synopetaspace); destination(d_synopetaspace); };

filter f_synoresourcemonitor { program("^ResourceMonitor$"); };
destination d_synoresourcemonitor {
	file("/var/log/synolog/synoresourcemonitor.log"
	template("$PRIORITY\t$YEAR/$MONTH/$DAY $HOUR:$MIN:$SEC\t$MESSAGE\n"));
};
log { source(s_syno_syslog); filter(f_synoresourcemonitor); destination(d_synoresourcemonitor); };

filter f_systemdr { program("^SystemDR$"); };
destination d_systemdr {
	file("/var/log/synolog/synosystemdr.log"
	template("$PRIORITY\t$YEAR/$MONTH/$DAY $HOUR:$MIN:$SEC\t$MESSAGE\n"));
};
log { source(s_syno_syslog); filter(f_systemdr); destination(d_systemdr); };

# define pkg synolog here
@include "/usr/local/etc/syslog-ng/patterndb.d/synolog"
